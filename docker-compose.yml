version: '3.8'

# 云打印系统完整部署配置
# 包含Backend API、Vue管理系统、数据库、缓存、对象存储等所有服务

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: printercloud-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123456}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-printercloud}
      MYSQL_USER: ${MYSQL_USER:-printercloud}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-printercloud123}
      TZ: Asia/Shanghai
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/docker/mysql/conf/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./backend/docker/mysql/init:/docker-entrypoint-initdb.d
    networks:
      - printercloud-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis缓存
  redis:
    image: redis:6.2-alpine
    container_name: printercloud-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./backend/docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - printercloud-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5

  # MinIO对象存储
  minio:
    image: minio/minio:latest
    container_name: printercloud-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    networks:
      - printercloud-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      timeout: 10s
      retries: 5

  # Backend API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: printercloud-backend
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      # 数据库配置
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: ${MYSQL_DATABASE:-printercloud}
      MYSQL_USERNAME: ${MYSQL_USER:-printercloud}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-printercloud123}
      # Redis配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      # MinIO配置
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-printercloud}
      # JWT配置
      JWT_SECRET: ${JWT_SECRET:-printercloud-jwt-secret-key-2024}
      # 微信配置
      WECHAT_APP_ID: ${WECHAT_APP_ID:-your-wechat-app-id}
      WECHAT_APP_SECRET: ${WECHAT_APP_SECRET:-your-wechat-app-secret}
      WECHAT_MCH_ID: ${WECHAT_MCH_ID:-your-wechat-mch-id}
      WECHAT_MCH_KEY: ${WECHAT_MCH_KEY:-your-wechat-mch-key}
      WECHAT_NOTIFY_URL: ${WECHAT_NOTIFY_URL:-http://your-domain.com/api/payment/callback}
      # JVM配置
      JAVA_OPTS: ${JAVA_OPTS:--Xms512m -Xmx1024m -XX:+UseG1GC}
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
      - /var/run/cups/cups.sock:/var/run/cups/cups.sock  # CUPS打印服务
    networks:
      - printercloud-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      timeout: 10s
      retries: 5
      start_period: 60s

  # Vue管理系统
  admin-web:
    build:
      context: ./admin-web
      dockerfile: Dockerfile
    container_name: printercloud-admin-web
    restart: unless-stopped
    environment:
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:8080}
      VITE_WS_URL: ${VITE_WS_URL:-ws://localhost:8080/ws}
    ports:
      - "${ADMIN_WEB_PORT:-3000}:80"
    volumes:
      - ./admin-web/docker/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - printercloud-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      timeout: 10s
      retries: 3

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: printercloud-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - printercloud-network
    depends_on:
      - backend
      - admin-web
    profiles:
      - nginx

  # 打印服务（CUPS）
  cups:
    image: olbat/cupsd
    container_name: printercloud-cups
    restart: unless-stopped
    environment:
      CUPSADMIN: admin
      CUPSPASSWORD: ${CUPS_PASSWORD:-admin123}
    ports:
      - "${CUPS_PORT:-631}:631"
    volumes:
      - cups_data:/etc/cups
      - /var/run/dbus:/var/run/dbus
    networks:
      - printercloud-network
    privileged: true
    profiles:
      - cups

# 数据卷定义
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local
  nginx_logs:
    driver: local
  cups_data:
    driver: local

# 网络定义
networks:
  printercloud-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 配置文件模板
configs:
  mysql_config:
    file: ./backend/docker/mysql/conf/my.cnf
  redis_config:
    file: ./backend/docker/redis/redis.conf
  nginx_config:
    file: ./nginx/nginx.conf
